---
import HeaderAndFooter from "../components/HeaderAndFooter/index.astro";
import HomePageSection from "../components/HomePageSection.astro";
import Spline from "../components/Spline.astro";
import Blobs from "../components/Blobs.astro";
//@ts-ignore
import { Img } from "astro-imagetools/components";

const { message } = Astro.props;

const markupData = [
  // {
  //   imageUrl: "/images/macbook3.jpeg",
  //   links: [],
  // },
  {
    text: [
      "I'm an inventive Software Engineer passionate for revolutionizing Financial Services, based in Chicago.",
    ],
    imageUrl: "/src/assets/images/bg/chi.jpg",
    links: [
      {
        href: "/resume",
        label: "Résumé",
        target: "_blank",
        nofollow: true,
      },
      {
        href: "/projects",
        label: "Projects",
      },
      {
        href: "/linkedin",
        label: "LinkedIn",
        target: "_blank",
        nofollow: true,
      },
      {
        href: "/github",
        label: "GitHub",
        target: "_blank",
        nofollow: true,
      },
    ],
  },
  {
    text: [
      "Recently, I accepted my Master's from Georgia Tech with highest distinction, where I devised groundbreaking Artificial Intelligence methods.",
    ],
    imageUrl: "/src/assets/images/bg/crosland.jpg",
    links: [],
  },
  {
    text: ["Beyond my novel work, I'm an ambitious marathoner and triathlete,"],
    imageUrl: "/src/assets/images/bg/bike.jpg",
    links: [
      {
        href: "/strava",
        label: "Strava",
      },
      {
        href: "/aero",
        label: "Aero",
      },
      // {
      //   href: "/photo/gear",
      //   label: "Gear",
      // },
    ],
    style: {
      maxHeight: "min(500px,130vw)",
    },
  },
  {
    text: ["Artistic, perspective-chasing photographer,"],
    imageUrl: "/photo-portfolio/portfolio2k/Manhattan--20Bridge.jpg",
    links: [
      {
        href: "/photo",
        label: "Gallery",
      },
      {
        href: "/photo/map",
        label: "Capture Map",
        nofollow: true,
      },
      // {
      //   href: "/photo/gear",
      //   label: "Gear",
      // },
    ],
    style: {
      maxHeight: "min(500px,130vw)",
    },
  },
  {
    text: ["home chef, and culinary explorer."],
    imageUrl: "/src/assets/images/bg/food.jpg",
    links: [
      {
        href: "/gourmet",
        label: "Blake Gourmet",
      },
      {
        href: "/menu",
        label:
          ["Winter", "Spring", "Summer", "Fall"][
            Math.floor(new Date().getMonth() / 3)
          ] + " Menu",
      },
      // {
      //   href: "/photo/gear",
      //   label: "Gear",
      // },
    ],
    style: {
      maxHeight: "min(500px,130vw)",
    },
  },

  {
    text: ["Let's connect."],
    imageUrl: "/src/assets/images/bg/connect.jpg",
    links: [
      {
        href: "mailto:blake@sanie.com",
        label: "Email",
        class: "email",
        nofollow: true,
      },
      {
        href: "/contact.vcf",
        label: "Contact Card",
        class: "contactCard",
      },
      {
        href: "/instagram",
        label: "Instagram",
        target: "_blank",
        nofollow: true,
      },
    ],
    style: {
      maxHeight: "min(500px,130vw)",
    },
  },
];
---

<HeaderAndFooter color="rgba(0,0,0,0.5)" title="Home" themeColor="black" isHome={true}>
  <HomePageSection id="firstSection" class="homePageSection sectionTransitionParent" imageUrl="/src/assets/images/cover.jpg">
    <h1><span id="typed">Hi, I'm Blake.</span></h1>
  </HomePageSection>
  {
    markupData.map((data, i) => (
      <HomePageSection
        imageUrl={data.imageUrl}
        text={data.text}
        links={data.links}
        class="homePageSection sectionTransitionParent"
        style={data.style}
      />
    ))
  }
</HeaderAndFooter>
{
  message && (
    <Fragment
      set:html={`<script>setTimeout(function(){history.pushState({}, null, '/');alert("${message}");}, 200)</script>`}
    />
  )
}

<script>
  // document.getElementById("canvas3d").onload = function () {
  //   alert("myframe is loaded");
  // };
import Typed from "typed.js";

// let shortTyped;

//     function typeToShort() {
//       return new Promise((resolve, reject) => {
//         shortTyped = new Typed("#typed", {
//           strings: ["", "Hi, I'm Blake. "],
//           typeSpeed: 50,
//           backSpeed: 40,
//           loop: false,
//           onComplete: function() {
//             longTyped.destroy();
//             resolve();
//           }
//         });
//       })
//     }

//     let longTyped;

//     async function typeToLong() {
//       return new Promise((resolve, reject) => {
//         longTyped = new Typed("#typed", {
//           strings: ["Hi, I'm Blake. <br><span class='newline'>Scroll to learn more...</span> ", "Hi, I'm Blake. "],
//           typeSpeed: 50,
//           backSpeed: 40,
//           loop: false,
//           smartBackspace: true,
//           onComplete: function() {
//             // shortTyped.destroy();
//             resolve();
//           }
//         });
//       })
//     }


const strings = [
  "Hi, I'm Blake. ^900 <br/>^0 <span class='newline'>Scroll to learn more...</span> ^1800",
  "Hi, I'm Blake. <br/>",
  ""
]

let pauses = 0
let typed;

  setTimeout(() => {

    typed = new Typed('#typed', {
      strings: ["Hi, I'm Blake. <br/>^0 <span class='newline'>Scroll to learn more...</span> ^1800", "Hi, I'm Blake. <br/>", ""],
             typeSpeed: 40,
         backSpeed: 30,
         backDelay: 0,
      onTypingPaused: () => {
          if (pauses == 0) {
            document.body.classList.add('smallCursor')

          }
          pauses++
        },
        onStringTyped: (i) => {
          if (i == 2) {
            document.body.classList.remove('smallCursor')
          }
        },
        onComplete: () => {
          typed.destroy()
          typed = new Typed("#typed", {
          strings: strings,
         loop: true,
         typeSpeed: 40,
         backSpeed: 30,
         backDelay: 0,
        onTypingPaused: () => {
          if (pauses % 3 == 0) {
            document.body.classList.add('smallCursor')

          }
          pauses++
        },
        onStringTyped: (i) => {
          if (i == 1) {
            document.body.classList.remove('smallCursor')
          }
        }
        });
        }
    })



    
  }, 4000);

  const sections = document.querySelectorAll(".sectionTransitionParent");
  const firstSection = document.getElementById("firstSection");

  const particlesElement = document.getElementById("particles-js");

  window.addEventListener("scroll", (e) => {

    const screenCenter = window.scrollY + window.innerHeight / 2;
    let sectionHeight = sections[0].offsetHeight;
    const rate = sectionHeight * 0.15;
    sections.forEach((section) => {
      if (!(section instanceof HTMLElement)) {
        return;
      }
      const sectionCenter = section.offsetTop + section.offsetHeight / 2;
      let effectiveScreenCenter = screenCenter;
      if (sectionCenter < window.innerHeight / 2) {
        // handles proper interpolation when top sections do not span window height, so the peak opacity is before the window center
        effectiveScreenCenter = sectionCenter;
      }
      const distUnder =
        document.body.scrollHeight - section.offsetTop - section.offsetHeight;
      const bestScreenCenter =
        window.scrollY +
        window.innerHeight -
        section.offsetHeight / 2 -
        distUnder;
      const dist =
        sectionCenter - Math.max(bestScreenCenter, effectiveScreenCenter);
      const diff = dist / sectionHeight;
      const bg = section.querySelector(".bg");
      if (!(bg instanceof HTMLElement)) {
        return;
      }
      const children = section.childNodes;
      bg.style.opacity = 0.05 + 0.55 * (1 - Math.abs(diff));
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (!(child instanceof HTMLElement)) {
          continue;
        }
        if (!child.classList.contains("bg")) {
          child.style.transform = `translateY(${-diff * rate}px)`;
        } else {
          // child.style.transform = `translateY(${diff * 300}px)`;
        }
      }
    });



    
  });
</script>

<style>
  html {
    color-scheme: only dark;
    background-color: black;
  }
  :global(.navChip) {
    background: rgb(0, 126, 204, 0.8);
  }
  :global(.navChipNested) {
    display: none;
  }
  body {
    color: white;
  }
  .homePageSection {
    max-height: min(1000px, 170vw);
  }
  #firstSection > *:not(#spline) {
    pointer-events: none;
    z-index: 1;
  }
  .nameZone {
    padding: 2em;
    border: 1px solid green;
  }
  #wwdc {
    width: 10em;
    padding: 0.5em;
    /* background: radial-gradient(
      closest-side at 4.5em 5em,
      rgba(255, 123, 0, 0.344) 0%,
      transparent 100%
    ); */
    overflow: visible;
    /* z-index: 9; */
    /* animation: fadeIn 6s ease-in; */
  }
  #wwdc img {
    width: 100%;
    aspect-ratio: 0.7557;
    animation: fadeIn 2s ease-in;
  }
  h1 {
    /* animation: fadeIn 3s ease-in; */
    /* z-index: 9; */
    font-size: 3.4em;
    /* mix-blend-mode: soft-light; */
    opacity: 1;
    padding: 0 1em;
    height: 1.4em;
    line-height: 80%;
    text-align: center;
    /* pointer-events: none; */
    /* filter: contrast(4); */
    /* backdrop-filter: contrast(4); */
    /* clip-path: ; */
    /* margin-top: 0.5em; */
    width: 10em;
  }
  :global(.newline) {
    font-size: 0.6em;
  }
  :global(.smallCursor .typed-cursor) {
    font-size: 0.6em;
  }
  .fullCenter {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  #mainMac {
    flex: 1;
    width: 100%;
    object-fit: cover;
    border: 1px solid yellow;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @media screen and (max-width: 800px) {
    #firstSection {
      /* height: calc(100vh - 80px);
      height: calc(100svh - 80px); */
    }
    :global(main) {
      margin-top: 0 !important;
    }
  }

  @media screen and (max-width: 600px) {
    :global(main) {
      font-size: calc(0.4em + 1.6vmin);
    }
    .homePageSection :global(h2) {
      padding: 0 1em;
    }
    .homePageSection :global(a) {
      font-size: 1.6em;
    }
  }
</style>

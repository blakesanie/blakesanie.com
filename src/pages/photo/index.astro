---
import HeaderAndFooter from "../../components/HeaderAndFooter/index.astro";
import Toggle from "../../components/Toggle/index.astro";
import { Img } from "astro-imagetools/components";

const initialMode = Astro.props.initialMode || "gallery";

// const images = await Astro.glob("./portfolio/*").then((files) => {
//   console.log("files", files);
//   const out = {};
//   for (const file of files) {
//     const filename = file.default.split("/").pop().split("@")[0];
//     out[filename] = file;
//   }
//   return out;
// });

const images = await import.meta.glob("/src/pages/photo/portfolio/*");
console.log("images", images);

const imageNames = Object.keys(images);

console.log("first buffer", await images[imageNames[0]]());

const gutter = 10;
---

<HeaderAndFooter allowMainStyles mainClass={initialMode}>
  <h1>Photography</h1>
  <p>
    My enthusiasm for capturing photographs lends me a creative release from my
    logical, algorithmic side. It also enables me to truly admire the
    compositional beauty in front of my eyes every day, from San Francisco, to
    Venice, to my own backyard.
  </p>
  <Toggle
    actions={[
      {
        id: "galleryButton",
        label: "Gallery",
      },
      {
        id: "mapButton",
        label: "Map",
      },
    ]}
    defaultAction={initialMode == "gallery" ? "galleryButton" : "mapButton"}
    id="photoToggle"
  />
  <div id="photoContent">
    <div id="gallery">
      <p>gallery</p>
      {
        Object.keys(images).map((image) => (
          <div class="galleryImage">
            <Img
              src={image}
              alt="alt text"
              breakpoints={[700]}
              quality={60}
              preload="webp"
              placeholder="dominantColor"
              loading="lazy"
            />
          </div>
        ))
      }
    </div>
    <div id="map">
      <p>map</p>
      <div id="exploreMap"></div>
    </div>
  </div>

  <style
    define:vars={{
      gutter: gutter + "px",
    }}
  >
    #photoContent > div {
      display: none;
      width: 100%;
    }
    /* :global(main.gallery) #photoContent > #gallery {
      display: block;
    } */

    #photoContent {
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 100%;
      position: relative;
    }

    .galleryImage {
      position: relative;
      /* width: calc(50% - var(--gutter) / 2); */
      margin-bottom: var(--gutter);
    }

    #exploreMap {
      width: 100%;
      height: calc(100vh - 70px);
      /* background-color: pink; */
    }

    @media screen and (max-width: 600px) {
      #photoContent {
        width: calc(100vw - 20px);
      }
    }
  </style>

  <script
    define:vars={{
      initialMode: initialMode,
      gutter: gutter,
    }}
  >
    let mode = initialMode;

    const galleryButton = document.getElementById("galleryButton");
    const mapButton = document.getElementById("mapButton");

    const galleryContainer = document.getElementById("gallery");
    const mapContainer = document.getElementById("map");

    galleryButton?.addEventListener("click", () => {
      if (mode != "gallery") {
        mode = "gallery";
        activateGallery();
      }
    });
    mapButton?.addEventListener("click", () => {
      if (mode != "map") {
        mode = "map";
        activateMap();
      }
    });

    let msnry;

    function shuffle(array) {
      let currentIndex = array.length,
        randomIndex;

      // While there remain elements to shuffle.
      while (currentIndex != 0) {
        // Pick a remaining element.
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex--;

        // And swap it with the current element.
        [array[currentIndex], array[randomIndex]] = [
          array[randomIndex],
          array[currentIndex],
        ];
      }

      return array;
    }

    let shuffled = false;

    let resizedSinceSwitchedToMap = false;

    function activateGallery() {
      function showGallery() {
        if (!shuffled) {
          for (var i = galleryContainer.children.length; i >= 0; i--) {
            galleryContainer.appendChild(
              galleryContainer.children[(Math.random() * i) | 0]
            );
          }
          shuffled = true;
        }

        mapContainer.style.display = "none";
        galleryContainer.style.display = "block";
        history.pushState({}, null, "/photo");
      }
      function getImageWidth() {
        const usableWidth = galleryContainer.clientWidth;
        let numCols = Math.floor(Math.pow(usableWidth, 0.6) / 18);
        return usableWidth / numCols - (gutter * (numCols - 1)) / numCols - 0.5;
      }

      function setGalleryImageWidths() {
        if (mode == "map") {
          resizedSinceSwitchedToMap = true;
          console.log("resized since switch to map", resizedSinceSwitchedToMap);
          return;
        }
        const width = getImageWidth();
        console.log("new image width", width);
        const images = document.getElementsByClassName("galleryImage");
        for (let i = 0; i < images.length; i++) {
          images[i].style.width = width + "px";
        }
      }
      function afterMasonryLoad() {
        if (!msnry) {
          showGallery();
          setGalleryImageWidths();

          window.addEventListener("resize", setGalleryImageWidths);

          // gallery.style.opacity = 0;
          msnry = new Masonry("#gallery", {
            columnWidth: ".galleryImage",
            itemSelector: ".galleryImage",
            gutter: gutter,
            transitionDuration: 200,
          });
          msnry.on("layoutComplete", function () {
            galleryContainer.style.opacity = 1;
            console.log("layout complete");
          });
          console.log("masonry", msnry);
        } else {
          if (resizedSinceSwitchedToMap) {
            galleryContainer.style.opacity = 0;
          }

          showGallery();
          if (resizedSinceSwitchedToMap) {
            console.log("RESIZE AFTER SWITCH");
            setGalleryImageWidths();
            msnry.layout();
            resizedSinceSwitchedToMap = false;
          }
        }
      }

      if (document.getElementById("masonryScript")) {
        afterMasonryLoad();
      } else {
        const script = document.createElement("script");
        script.src = "https://masonry.desandro.com/masonry.pkgd.js";
        script.id = "masonryScript";
        script.addEventListener("load", function () {
          afterMasonryLoad();
        });
        document.body.appendChild(script);
      }
    }

    let map;

    function activateMap() {
      resizedSinceSwitchedToMap = false;
      function showMap() {
        console.log("show map");
        galleryContainer.style.display = "none";
        mapContainer.style.display = "block";
        history.pushState({}, null, "/photo/map");
      }
      function afterMapsLoad() {
        console.log("after map load");
        showMap();
        const width = mapContainer.clientWidth;
        const zoom = Math.floor(1.73 * Math.log(width) - 9.26);

        if (!map) {
          map = new google.maps.Map(
            document.getElementById("exploreMap"),

            {
              // center: { lat: (maxLat + minLat) / 2, lng: (maxLng + minLng) / 2 },
              center: { lat: 0, lng: 0 },
              zoom: zoom,
              zoomControl: true,
              zoomControlOptions: {
                position: google.maps.ControlPosition.RIGHT_CENTER,
              },
              streetViewControl: true,
              streetViewControlOptions: {
                position: google.maps.ControlPosition.RIGHT_CENTER,
              },
              fullscreenControl: true,
              fullscreenControlOptions: {
                position: google.maps.ControlPosition.RIGHT_CENTER,
              },
              rotateControl: true,
              rotateControlOptions: {
                position: google.maps.ControlPosition.RIGHT_CENTER,
              },
            }
          );
        }
        // infoWindow = new google.maps.InfoWindow();
        // for (let i = 0; i < filenames.length; i++) {
        //   const filename = filenames[i];
        //   const { gps } = files[filename].exif;
        //   if (gps) {
        //     const [lat, lng] = gps;
        //     const [name, ext] = filename.split(".");
        //     const marker = new google.maps.Marker({
        //       position: { lat: lat, lng: lng },
        //       map: map,
        //     });
        //     function openFullScreen() {
        //       setSelectedPhotoWithLoading(i);
        //     }
        //     function showPreview() {
        //       let img = document.createElement("img");
        //       img.src = myLoader({
        //         src: `/images/portfolio/${name}.${ext}`,
        //         width: 384,
        //         quality: 75,
        //       });
        //       img.addEventListener("click", (e) => {
        //         e.stopPropagation();
        //         openFullScreen();
        //       });
        //       img.style.width = "192px";
        //       img.style.marginBottom = "-10px";
        //       img.style.cursor = "pointer";

        //       // infoWindow.close();
        //       infoWindow.setContent(img);
        //       infoWindow.open(marker.getMap(), marker);
        //     }
        //     marker.addListener("mouseover", function () {
        //       canHover = true;
        //       showPreview();
        //     });
        //     marker.addListener("mouseout", function () {
        //       if (canHover) {
        //         infoWindow.close();
        //       }
        //     });
        //     marker.addListener("click", (e) => {
        //       e.domEvent.stopPropagation();
        //       if (canHover) {
        //         openFullScreen(e);
        //       } else {
        //         showPreview();
        //       }
        //     });
        //   }
        // }
      }
      if (!document.getElementById("mapsScript")) {
        const script = document.createElement("script");
        script.src =
          "https://maps.googleapis.com/maps/api/js?key=AIzaSyACmDd88Pi1CAoU8Q4keEPKzc1RzqIkCuw&v=3.exp";
        script.id = "mapsScript";
        script.addEventListener("load", afterMapsLoad);
        document.body.append(script);
      } else {
        afterMapsLoad();
      }
    }

    if (initialMode === "gallery") {
      activateGallery();
    } else if (initialMode === "map") {
      activateMap();
    } else {
    }
  </script>
</HeaderAndFooter>

---
import HeaderAndFooter from "../../components/HeaderAndFooter/index.astro";
import Toggle from "../../components/Toggle/index.astro";
import { Img } from "astro-imagetools/components";
import exifr from "exifr";
import { Icon } from "astro-icon";
import sizeOf from "image-size";
import exiftoolJson from "./metadata.json";

// console.log("exiftool", exiftoolJson["DSC05014.jpg"]);

const initialMode = Astro.props.initialMode || "gallery";

// const images = await Astro.glob("./portfolio/*").then((files) => {
//   console.log("files", files);
//   const out = {};
//   for (const file of files) {
//     const filename = file.default.split("/").pop().split("@")[0];
//     out[filename] = file;
//   }
//   return out;
// });

function removeEmpty(obj) {
  return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v != null));
}

const cameraRenamings = {
  "SONY ILCE-7": "Sony a7",
  "NIKON CORPORATION NIKON D3200": "Nikon D3200",
};

const lensRenamings = {
  "FE 28-70mm F3.5-5.6 OSS": "Sony FE 28-70mm",
  "18.0-105.0 mm f/3.5-5.6": "Nikkor 18-105mm DX",
  "AF-S DX VR Zoom-Nikkor 18-105mm f/3.5-5.6G ED": "Nikkor 18-105mm DX",
  "SAMYANG AF 24mm F2.8": "Rokinon 24mm F2.8",
  "AF-S DX Nikkor 35mm f/1.8G": "Nikkor 35mm f/1.8G DX",
  "----": "Helios 44/2",
};

function applyRenamings(str, renamings) {
  if (!str) {
    return str;
  }
  console.log("str is", str);
  for (const [key, value] of Object.entries(renamings)) {
    if (!value) {
      return undefined;
    }
    str = str.replace(key, value);
  }
  return str;
}

const glob = await import.meta.glob("/src/pages/photo/portfolio/*");
const images = {};
await Promise.all(
  Object.keys(glob).map(async (path) => {
    // console.log("get exif from", path);
    const exif = await exifr.parse("." + path, {
      makerNote: true,
      userComment: true,
      xmp: true,
      icc: true,
      jfif: true,
    });
    const name = path.split("/").pop()?.split(".")[0];
    const { width, height } = await sizeOf("." + path);
    const extracted = {
      path,
      ...removeEmpty(
        exif
          ? {
              latitude: exif.latitude,
              longitude: exif.longitude,
              aperture: exif.ApertureValue || exif.FNumber,
              shutter: exif.ExposureTime,
              iso: exif.ISO,
              focalLength: exif.FocalLengthIn35mmFormat || exif.FocalLength,
              camera:
                exif.Make &&
                exif.Model &&
                applyRenamings(exif.Make + " " + exif.Model, cameraRenamings),
              lens: applyRenamings(
                exif.LensModel ||
                  exif.Lens ||
                  (exiftoolJson[name] &&
                    (exiftoolJson[name]["Lens ID"] ||
                      exiftoolJson[name]["Lens Spec"])),
                lensRenamings
              ),
              date: exif.DateTimeOriginal || exif.CreateDate,
              width,
              height,
              decoded:
                exif.makerNode &&
                String.fromCharCode.apply(null, exif.makerNote),
            }
          : {}
      ),
    };
    // console.log(
    //   "decode",
    //   exif.makerNote,
    //   "to",
    //   String.fromCharCode.apply(null, exif.makerNote)
    // );
    // console.log("exif", exif, extracted);
    images[name] = extracted;
  })
);

let minLat = Infinity;
let maxLat = -Infinity;
let minLng = Infinity;
let maxLng = -Infinity;

for (const image of Object.values(images)) {
  if (image.latitude) {
    minLat = Math.min(minLat, image.latitude);
    maxLat = Math.max(maxLat, image.latitude);
    minLng = Math.min(minLng, image.longitude);
    maxLng = Math.max(maxLng, image.longitude);
  }
}

// for (const path of Object.keys(glob)) {
//   const filename = path.split("/").pop().split("@")[0];
//   images[filename] = glob[path];
// }

// console.log("exif", imageExif);
// console.log("first buffer", await images[imageNames[0]]());
// console.log("images", images);
const gutter = 10;
---

<HeaderAndFooter allowMainStyles mainClass={initialMode}>
  <h1>Photography</h1>
  <p>
    My enthusiasm for capturing photographs lends me a creative release from my
    logical, algorithmic side. It also enables me to truly admire the
    compositional beauty in front of my eyes every day, from San Francisco, to
    Venice, to my own backyard.
  </p>
  <Toggle
    actions={[
      {
        id: "galleryButton",
        label: "Gallery",
      },
      {
        id: "mapButton",
        label: "Map",
      },
    ]}
    defaultAction={initialMode == "gallery" ? "galleryButton" : "mapButton"}
    id="photoToggle"
  />
  <div id="advancedLabel">AI Image Search Query</div>
  <div id="AISearch" class="minimized">
    <input type="text" placeholder='AI Search Query, ex. "New York Sunset"' />
  </div>
  <div id="photoContent">
    <div id="gallery">
      <p>gallery</p>
      {
        Object.entries(images).map(([name, image]) => (
          <div class="galleryImage" name={name}>
            <Img
              src={image.path}
              alt="alt text"
              breakpoints={[600]}
              quality={40}
              format="webp"
              placeholder="dominantColor"
              loading="lazy"
            />
            {image.latitude && (
              <Icon pack="mdi" name="map-marker" color="white" />
            )}
          </div>
        ))
      }
    </div>
    <div id="map">
      <div id="exploreMap"></div>
    </div>
    <div class="fullScreenReserves">
      {
        Object.entries(images).map(([name, image]) => (
          <div id={`fullScreen-${name}`} class="full">
            <Img
              src={image.path}
              alt="alt text"
              breakpoints={[400, 800, 1200, 1600, 2000]}
              quality={60}
              format="webp"
              placeholder="blurred"
              loading="lazy"
            />
          </div>
        ))
      }
    </div>
    <div class="thumbnailReserves">
      {
        Object.entries(images).map(([name, image]) => (
          <div id={`thumbnail-${name}`} class="thumb">
            <Img
              src={image.path}
              alt="alt text"
              breakpoints={[300]}
              quality={50}
              format="webp"
              placeholder="blurred"
              loading="lazy"
            />
          </div>
        ))
      }
    </div>
  </div>

  <div id="fullScreen" slot="topLevel">
    <div class="section" id="photoFullScreen">
      <div id="imageInfo">
        <div id="imageName">image name</div>
        <div id="metaData">
          <div>10s</div>
          <div>f2.8</div>
        </div>
        <div id="fullScreenActions">
          <div id="prev">Prev</div>
          <div id="next">Next</div>
          <div id="exit">Exit</div>
        </div>
      </div>
    </div>
    <div class="section" id="mapFullScreen">
      <div id="selectedMap"></div>
    </div>
  </div>

  {
    initialMode == "map" ? (
      <script
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyACmDd88Pi1CAoU8Q4keEPKzc1RzqIkCuw&v=3.exp"
        id="mapsScript"
      />
    ) : (
      <script
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyACmDd88Pi1CAoU8Q4keEPKzc1RzqIkCuw&v=3.exp"
        id="mapsScript"
        defer
      />
    )
  }

  {
    initialMode == "gallery" ? (
      <script
        src="https://masonry.desandro.com/masonry.pkgd.js"
        id="masonryScript"
      />
    ) : (
      <script
        src="https://masonry.desandro.com/masonry.pkgd.js"
        id="masonryScript"
        defer
      />
    )
  }

  <style
    define:vars={{
      gutter: gutter + "px",
    }}
  >
    :global(#photoToggle) {
      margin-bottom: 1em;
    }
    #advancedLabel {
      font-size: 0.8em;
      opacity: 0.5;
      margin-bottom: 1em;
      cursor: pointer;
      transition: opacity 0.2s ease;
    }

    #advancedLabel:hover {
      opacity: 1;
    }

    #AISearch {
      width: 100%;
      max-width: 500px;
      height: 2.4em;
      transition: all 0.15s ease;
      padding-bottom: 1em;
      box-sizing: content-box;
    }

    #AISearch.minimized {
      height: 0;
      padding: 0;
      opacity: 0;
    }

    #AISearch > input {
      width: 100%;
      height: 100%;
      padding: 0 1em;
      font-size: 1em;
      border: none;
      outline: none;
      box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.07);
      border-radius: 8px;
    }

    #photoContent > div {
      display: none;
      width: 100%;
    }

    img[!src] {
      text-indent: -9999px;
    }
    /* :global(main.gallery) #photoContent > #gallery {
      display: block;
    } */

    #photoContent {
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 100%;
      position: relative;
      max-width: none;
    }

    .galleryImage {
      position: relative;
      /* width: calc(50% - var(--gutter) / 2); */
      margin-bottom: var(--gutter);
      cursor: pointer;
    }

    .galleryImage > svg {
      position: absolute;
      bottom: 5px;
      right: 5px;
      width: 25px;
      opacity: 0.7;
    }

    #exploreMap {
      width: 100%;
      height: calc(100vh - 70px);
      /* background-color: pink; */
    }

    .thumb {
      width: 192px;
      border: 8px solid white;
      /* height: 100px; */
    }

    :global(div[role="dialog"], div[role="dialog"] *) {
      padding: 0 !important;
      overflow: hidden !important;
      border-radius: 0 !important;
      box-shadow: none !important;
    }

    :global(.gm-ui-hover-effect) {
      display: none !important;
    }

    #fullScreen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      max-width: none;
      height: 100vh;
      background-color: white;
      /* border: 10px solid yellow; */
      z-index: 9999999;
      overflow: scroll;
      opacity: 0;
      pointer-events: none;
    }
    #fullScreen.active {
      opacity: 1;
      pointer-events: all;
    }

    #fullScreen .section {
      height: 100vh;
      height: 100svh;
      width: 100%;
      /* border: 10px solid yellow; */
      padding: var(--gutter);
    }

    #photoFullScreen {
      display: flex;
      justify-content: center;
      align-items: center;
    }

    #imageInfo {
      padding: 10px;
      display: flex;
      flex-direction: column;
      align-items: center;
      /* flex: 1; */
    }

    #imageName {
      font-size: 1.2em;
      margin-bottom: 0.2em;
    }

    #metaData,
    #fullScreenActions {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
    }

    :global(#metaData > div) {
      margin: 0.3em;
      font-size: 0.9em;
      padding: 0.2em 0.5em;
      background-color: rgba(0, 0, 0, 0.04);
      color: #888;
      border-radius: 0.3em;
      white-space: nowrap;
    }

    #fullScreenActions > div {
      padding: 0.2em 0.5em;
      opacity: 0.4;
      transition: opacity 0.2s ease;
      cursor: pointer;
    }

    #fullScreenActions > div:hover {
      opacity: 1;
    }

    #photoFullScreen .full {
    }

    #selectedMap {
      height: 100%;
      width: 100%;
    }

    :global(.stop-scrolling) {
      height: 100%;
      overflow: hidden;
    }

    @media screen and (max-width: 600px) {
      #photoContent {
        width: calc(100vw - var(--gutter) * 2);
      }
    }
  </style>

  <script
    define:vars={{
      initialMode: initialMode,
      gutter: gutter,
      images: images,
      minLat: minLat,
      maxLat: maxLat,
      minLng: minLng,
      maxLng: maxLng,
    }}
  >
    //  __
    // /  |
    // $$/  _____  ____    ______          ______    ______    _______
    // /  |/     \/    \  /      \        /      \  /      \  /       |
    // $$ |$$$$$$ $$$$  |/$$$$$$  |      /$$$$$$  |/$$$$$$  |/$$$$$$$/
    // $$ |$$ | $$ | $$ |$$ |  $$ |      $$ |  $$ |$$ |  $$ |$$      \
    // $$ |$$ | $$ | $$ |$$ \__$$ |      $$ \__$$ |$$ |__$$ | $$$$$$  |
    // $$ |$$ | $$ | $$ |$$    $$ |      $$    $$/ $$    $$/ /     $$/
    // $$/ $$/  $$/  $$/  $$$$$$$ |       $$$$$$/  $$$$$$$/  $$$$$$$/
    //                   /  \__$$ |                $$ |
    //                   $$    $$/                 $$ |
    //                    $$$$$$/                  $$/

    const galleryContainer = document.getElementById("gallery");

    // do the shuffling regardless
    for (var i = galleryContainer.children.length; i >= 0; i--) {
      const index = Math.random() * i;
      galleryContainer.appendChild(galleryContainer.children[index | 0]);
    }

    let imageOrder = [];

    for (var i = 0; i < galleryContainer.children.length; i++) {
      const name = galleryContainer.children[i].getAttribute("name");
      imageOrder.push(name);
      galleryContainer.children[i].addEventListener("click", () => {
        activateFullScreen(name);
      });
    }

    let imageChanges = {};

    let prev = undefined;
    for (let i = 0; i < imageOrder.length; i++) {
      const curr = imageOrder[i];
      if (prev) {
        imageChanges[prev]["next"] = curr;
      }
      imageChanges[curr] = {
        prev: prev,
      };
      prev = curr;
    }

    console.log("image changes", imageChanges);

    //                                __
    //                               /  |
    //  _____  ____    ______    ____$$ |  ______
    // /     \/    \  /      \  /    $$ | /      \
    // $$$$$$ $$$$  |/$$$$$$  |/$$$$$$$ |/$$$$$$  |
    // $$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$    $$ |
    // $$ | $$ | $$ |$$ \__$$ |$$ \__$$ |$$$$$$$$/
    // $$ | $$ | $$ |$$    $$/ $$    $$ |$$       |
    // $$/  $$/  $$/  $$$$$$/   $$$$$$$/  $$$$$$$/

    let mode = initialMode;

    const galleryButton = document.getElementById("galleryButton");
    const mapButton = document.getElementById("mapButton");

    const mapContainer = document.getElementById("map");

    galleryButton?.addEventListener("click", () => {
      if (mode != "gallery") {
        mode = "gallery";
        document.getElementById("photoNavLink").click();
        activateGallery();
      }
    });
    mapButton?.addEventListener("click", () => {
      if (mode != "map") {
        mode = "map";
        document.getElementById("mapNavLink").click();
        activateMap();
      }
    });

    let msnry;

    let resizedSinceSwitchedToMap = false;

    function activateGallery() {
      function showGallery() {
        mapContainer.style.display = "none";
        galleryContainer.style.display = "block";
        history.pushState({}, null, "/photo");
      }
      function getImageWidth() {
        const usableWidth = galleryContainer.clientWidth;
        let numCols = Math.floor(Math.pow(usableWidth, 0.6) / 18);
        return usableWidth / numCols - (gutter * (numCols - 1)) / numCols - 0.5;
      }

      function setGalleryImageWidths() {
        if (mode == "map") {
          resizedSinceSwitchedToMap = true;
          console.log("resized since switch to map", resizedSinceSwitchedToMap);
          return;
        }
        const width = getImageWidth();
        console.log("new image width", width);
        const images = document.getElementsByClassName("galleryImage");
        for (let i = 0; i < images.length; i++) {
          images[i].style.width = width + "px";
        }
      }
      if (!msnry) {
        showGallery();
        setGalleryImageWidths();

        window.addEventListener("resize", setGalleryImageWidths);

        // gallery.style.opacity = 0;
        msnry = new Masonry("#gallery", {
          columnWidth: ".galleryImage",
          itemSelector: ".galleryImage",
          gutter: gutter,
          transitionDuration: 200,
        });
        msnry.on("layoutComplete", function () {
          galleryContainer.style.opacity = 1;
          console.log("layout complete");
        });
        console.log("masonry", msnry);
      } else {
        if (resizedSinceSwitchedToMap) {
          galleryContainer.style.opacity = 0;
        }

        showGallery();
        if (resizedSinceSwitchedToMap) {
          console.log("RESIZE AFTER SWITCH");
          setGalleryImageWidths();
          msnry.layout();
          resizedSinceSwitchedToMap = false;
        }
      }
    }

    let map;
    let blurInterval;

    function activateMap() {
      resizedSinceSwitchedToMap = false;
      function showMap() {
        galleryContainer.style.display = "none";
        mapContainer.style.display = "block";
        history.pushState({}, null, "/photo/map");
      }

      showMap();
      const width = mapContainer.clientWidth;
      const zoom = Math.floor(1.73 * Math.log(width) - 9.26);

      if (!map) {
        map = new google.maps.Map(document.getElementById("exploreMap"), {
          center: {
            lat: (maxLat + minLat) / 2,
            lng: (maxLng + minLng) / 2,
          },
          zoom: zoom,
          zoomControl: true,
          zoomControlOptions: {
            position: google.maps.ControlPosition.RIGHT_CENTER,
          },
          streetViewControl: true,
          streetViewControlOptions: {
            position: google.maps.ControlPosition.RIGHT_CENTER,
          },
          fullscreenControl: true,
          fullscreenControlOptions: {
            position: google.maps.ControlPosition.RIGHT_CENTER,
          },
          rotateControl: true,
          rotateControlOptions: {
            position: google.maps.ControlPosition.RIGHT_CENTER,
          },
        });
        const infoWindow = new google.maps.InfoWindow();

        for (const [name, image] of Object.entries(images)) {
          const lat = image.latitude;
          const lng = image.longitude;
          const marker = new google.maps.Marker({
            position: { lat: lat, lng: lng },
            map: map,
          });

          function showPreview() {
            const element = document
              .getElementById("thumbnail-" + name)
              .cloneNode(true);
            console.log("cloned thumb", element);
            infoWindow.setContent(element);
            infoWindow.open(marker.getMap(), marker);
          }

          marker.addListener("mouseover", function () {
            showPreview();
          });
          marker.addListener("mouseout", function () {
            infoWindow.close();
          });
          marker.addListener("click", (e) => {
            blurInterval = setInterval(() => {
              document.activeElement.blur();
            }, 100);
            activateFullScreen(name);
            e.domEvent.stopPropagation();
            e.domEvent.preventDefault();
            console.log("active before", document.activeElement);
            document.activeElement.blur();
            console.log("active after", document.activeElement);
            // console.log("click event", e.domEvent);
          });
        }
      }
    }

    if (initialMode === "gallery") {
      activateGallery();
    } else if (initialMode === "map") {
      activateMap();
    } else {
    }

    //  __                                                    __                        __      __
    // /  |                                                  /  |                      /  |    /  |
    // $$/  _____  ____    ______          _______   ______  $$ |  ______    _______  _$$ |_   $$/   ______   _______
    // /  |/     \/    \  /      \        /       | /      \ $$ | /      \  /       |/ $$   |  /  | /      \ /       \
    // $$ |$$$$$$ $$$$  |/$$$$$$  |      /$$$$$$$/ /$$$$$$  |$$ |/$$$$$$  |/$$$$$$$/ $$$$$$/   $$ |/$$$$$$  |$$$$$$$  |
    // $$ |$$ | $$ | $$ |$$ |  $$ |      $$      \ $$    $$ |$$ |$$    $$ |$$ |        $$ | __ $$ |$$ |  $$ |$$ |  $$ |
    // $$ |$$ | $$ | $$ |$$ \__$$ |       $$$$$$  |$$$$$$$$/ $$ |$$$$$$$$/ $$ \_____   $$ |/  |$$ |$$ \__$$ |$$ |  $$ |
    // $$ |$$ | $$ | $$ |$$    $$ |      /     $$/ $$       |$$ |$$       |$$       |  $$  $$/ $$ |$$    $$/ $$ |  $$ |
    // $$/ $$/  $$/  $$/  $$$$$$$ |      $$$$$$$/   $$$$$$$/ $$/  $$$$$$$/  $$$$$$$/    $$$$/  $$/  $$$$$$/  $$/   $$/
    //                   /  \__$$ |
    //                   $$    $$/
    //                    $$$$$$/

    let fullScreenElement;
    let photoFullScreenElement;
    let mapFullScreenElement;
    let imageInfoElement;
    let imageNameElement;
    let metaDataElement;
    let prevElement;
    let nextElement;
    let fullScreenOpen = false;
    let openFileName;
    let selectedMapElement;

    let currentImageElement;

    function prevImage() {
      if (!openFileName) return;
      const newFilename = imageChanges[openFileName]["prev"];
      activateFullScreen(newFilename);
    }

    function nextImage() {
      if (!openFileName) return;
      const newFilename = imageChanges[openFileName]["next"];
      activateFullScreen(newFilename);
    }

    const minCardWidth = 160;
    const minCardHeight = 132;

    function maxWidthThatFits(spaceWidth, spaceHeight, width, height) {
      // assume full width
      const spaceAspect = spaceWidth / spaceHeight;
      const aspect = width / height;
      if (aspect > spaceAspect) {
        return spaceWidth;
      }
      return spaceHeight * aspect;
    }

    function bestImgWidth(filename) {
      const usableWidth = window.innerWidth - gutter * 2;
      const usableHeight = window.innerHeight - gutter * 2;
      const { width, height } = images[filename];
      // assume horizontal layout
      let widthIfHorizontal = maxWidthThatFits(
        usableWidth - minCardWidth,
        usableHeight,
        width,
        height
      );
      //asume vertical layout
      let widthIfVertical = maxWidthThatFits(
        usableWidth,
        usableHeight - minCardHeight,
        width,
        height
      );

      return [
        Math.max(widthIfHorizontal, widthIfVertical),
        widthIfHorizontal > widthIfVertical,
      ]; // is horizontal layout
    }

    function setCurrentImageWidthAndLayout() {
      const [bestWidth, isHorizontal] = bestImgWidth(openFileName);
      currentImageElement.style.width = bestWidth + "px";
      if (isHorizontal) {
        photoFullScreenElement.style.flexDirection = "row";
        imageInfoElement.style.maxWidth =
          window.innerWidth - gutter * 2 - bestWidth + "px";
      } else {
        photoFullScreenElement.style.flexDirection = "column";
        imageInfoElement.style.maxWidth = "none";
      }
    }

    function activateFullScreen(filename) {
      if (!filename) {
        return;
      }
      openFileName = filename;
      if (!fullScreenOpen) {
        if (!fullScreenElement) {
          fullScreenElement = document.getElementById("fullScreen");
          photoFullScreenElement = document.getElementById("photoFullScreen");
          mapFullScreenElement = document.getElementById("mapFullScreen");
          selectedMapElement = document.getElementById("selectedMap");
          imageInfoElement = document.getElementById("imageInfo");
          prevElement = document.getElementById("prev");
          prevElement.addEventListener("click", prevImage);
          nextElement = document.getElementById("next");
          nextElement.addEventListener("click", nextImage);
          document.getElementById("exit").addEventListener("click", () => {
            fullScreenElement.classList.remove("active");
            fullScreenOpen = false;

            document.body.classList.remove("stop-scrolling");
          });
          imageNameElement = document.getElementById("imageName");
          metaDataElement = document.getElementById("metaData");
        }
        fullScreenElement.classList.add("active");
        fullScreenOpen = true;
      }
      buildSelectedMap(filename);

      document.body.classList.add("stop-scrolling");

      // set prev and next blocks
      const { prev, next } = imageChanges[filename];
      console.log("prev", prev, "next", next);
      imageNameElement.innerHTML = filename;
      prevElement.style.display = prev ? "block" : "none";
      nextElement.style.display = next ? "block" : "none";

      // set full screen image
      if (currentImageElement) {
        currentImageElement.remove();
      }
      currentImageElement = document
        .getElementById(`fullScreen-${filename}`)
        .cloneNode(true);
      setCurrentImageWidthAndLayout();
      photoFullScreenElement.appendChild(currentImageElement);

      // set meta data
      metaDataElement.innerHTML = "";
      const captured = images[filename];
      if (captured.shutter) {
        if (captured.shutter < 0) {
        }
        metaDataElement.innerHTML += `<div>${
          captured.shutter < 1
            ? `1/${Math.round(1 / captured.shutter)}`
            : captured.shutter
        }s</div>`;
      }
      if (captured.aperture) {
        metaDataElement.innerHTML += `<div>f/${
          Math.round(captured.aperture * 10) / 10
        }</div>`;
      }
      if (captured.iso) {
        metaDataElement.innerHTML += `<div>ISO ${captured.iso}</div>`;
      }
      if (captured.focalLength) {
        metaDataElement.innerHTML += `<div>${captured.focalLength}mm</div>`;
      }
      if (captured.camera) {
        let cam = captured.camera;
        cam = cam.replace("SONY ILCE-7", "Sony A7");

        metaDataElement.innerHTML += `<div>${cam}</div>`;
      }
      if (captured.lens) {
        metaDataElement.innerHTML += `<div>${captured.lens}</div>`;
      }
      if (captured.latitude) {
        metaDataElement.innerHTML += `<div>GPS Below</div>`;
      }
      mapFullScreenElement.style.display = captured.latitude ? "block" : "none";
    }

    window.addEventListener("resize", () => {
      if (fullScreenOpen) {
        setCurrentImageWidthAndLayout();
      }
    });

    //  __                            __                                            __
    // /  |                          /  |                                          /  |
    // $$ |   __   ______   __    __ $$ |____    ______    ______    ______    ____$$ |
    // $$ |  /  | /      \ /  |  /  |$$      \  /      \  /      \  /      \  /    $$ |
    // $$ |_/$$/ /$$$$$$  |$$ |  $$ |$$$$$$$  |/$$$$$$  | $$$$$$  |/$$$$$$  |/$$$$$$$ |
    // $$   $$<  $$    $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ | /    $$ |$$ |  $$/ $$ |  $$ |
    // $$$$$$  \ $$$$$$$$/ $$ \__$$ |$$ |__$$ |$$ \__$$ |/$$$$$$$ |$$ |      $$ \__$$ |
    // $$ | $$  |$$       |$$    $$ |$$    $$/ $$    $$/ $$    $$ |$$ |      $$    $$ |
    // $$/   $$/  $$$$$$$/  $$$$$$$ |$$$$$$$/   $$$$$$/   $$$$$$$/ $$/        $$$$$$$/
    //                     /  \__$$ |
    //                     $$    $$/
    //                      $$$$$$/

    function setKeyDown() {
      document.onkeydown = function (evt) {
        evt = evt || window.event;
        if (evt.key === "Escape" || evt.key === "Esc") {
          document.getElementById("exit").click();
        } else if (evt.key === "ArrowLeft") {
          clearInterval(blurInterval);
          prevImage();
        } else if (evt.key === "ArrowRight") {
          clearInterval(blurInterval);
          nextImage();
        }
      };
    }

    setKeyDown();

    //                      __                        __                      __
    //                     /  |                      /  |                    /  |
    //   _______   ______  $$ |  ______    _______  _$$ |_     ______    ____$$ |       _____  ____    ______    ______
    //  /       | /      \ $$ | /      \  /       |/ $$   |   /      \  /    $$ |      /     \/    \  /      \  /      \
    // /$$$$$$$/ /$$$$$$  |$$ |/$$$$$$  |/$$$$$$$/ $$$$$$/   /$$$$$$  |/$$$$$$$ |      $$$$$$ $$$$  | $$$$$$  |/$$$$$$  |
    // $$      \ $$    $$ |$$ |$$    $$ |$$ |        $$ | __ $$    $$ |$$ |  $$ |      $$ | $$ | $$ | /    $$ |$$ |  $$ |
    //  $$$$$$  |$$$$$$$$/ $$ |$$$$$$$$/ $$ \_____   $$ |/  |$$$$$$$$/ $$ \__$$ |      $$ | $$ | $$ |/$$$$$$$ |$$ |__$$ |
    // /     $$/ $$       |$$ |$$       |$$       |  $$  $$/ $$       |$$    $$ |      $$ | $$ | $$ |$$    $$ |$$    $$/
    // $$$$$$$/   $$$$$$$/ $$/  $$$$$$$/  $$$$$$$/    $$$$/   $$$$$$$/  $$$$$$$/       $$/  $$/  $$/  $$$$$$$/ $$$$$$$/
    //                                                                                                         $$ |
    //                                                                                                         $$ |
    //                                                                                                         $$/

    let selectedMap;

    function buildSelectedMap(filename) {
      // if
      const { longitude, latitude } = images[filename];
      if (!longitude) {
        mapFullScreenElement.style.display = "none";
        return;
      } else {
        mapFullScreenElement.style.display = "block";
      }
      selectedMap = new google.maps.Map(selectedMapElement, {
        center: {
          lat: latitude,
          lng: longitude,
        },
        zoom: 16,
        zoomControl: true,
        zoomControlOptions: {
          position: google.maps.ControlPosition.RIGHT_CENTER,
        },
        streetViewControl: true,
        streetViewControlOptions: {
          position: google.maps.ControlPosition.RIGHT_CENTER,
        },
        fullscreenControl: true,
        fullscreenControlOptions: {
          position: google.maps.ControlPosition.RIGHT_CENTER,
        },
        rotateControl: true,
        rotateControlOptions: {
          position: google.maps.ControlPosition.RIGHT_CENTER,
        },
      });
      const marker = new google.maps.Marker({
        position: { lat: latitude, lng: longitude },
        map: selectedMap,
      });
    }

    //   ______   ______
    //  /      \ /      |
    // /$$$$$$  |$$$$$$/
    // $$ |__$$ |  $$ |
    // $$    $$ |  $$ |
    // $$$$$$$$ |  $$ |
    // $$ |  $$ | _$$ |_
    // $$ |  $$ |/ $$   |
    // $$/   $$/ $$$$$$/

    const advancedLabel = document.getElementById("advancedLabel");
    const AISearch = document.getElementById("AISearch");
    let advancedOpen = false;
    advancedLabel.addEventListener("click", () => {
      if (advancedOpen) {
        advancedLabel.innerHTML = "AI Image Search Query";
        AISearch.classList.add("minimized");
      } else {
        advancedLabel.innerHTML = "Ignore Query";
        AISearch.classList.remove("minimized");
      }
      advancedOpen = !advancedOpen;
    });

    //  _______    ______   __     __
    // /       \  /      \ /  \   /  |
    // $$$$$$$  | $$$$$$  |$$  \ /$$/
    // $$ |  $$ | /    $$ | $$  /$$/
    // $$ |  $$ |/$$$$$$$ |  $$ $$/
    // $$ |  $$ |$$    $$ |   $$$/
    // $$/   $$/  $$$$$$$/     $/

    document.getElementById("mapNavLink").addEventListener("click", (e) => {
      e.preventDefault();
      document.getElementById("mapButton").click();
    });

    document.getElementById("photoNavLink").addEventListener("click", (e) => {
      e.preventDefault();
      document.getElementById("galleryButton").click();
    });
  </script>
</HeaderAndFooter>

---
import HeaderAndFooter from "../../components/HeaderAndFooter/index.astro";
import { SEO } from "astro-seo";
import Button from "../../components/basic/Button.astro";
import { formatDate } from "../../components/basic/PageCard.astro";
import BreadCrumbs from "../../components/basic/BreadCrumbs.astro";
import fs from "fs";

export async function getStaticPaths() {
  const posts = await Astro.glob("../../posts/**/*.mdx");
  const pages = {};
  let out = posts
    .filter((p) => {
      console.log("p is", p.file, p.file.split("/src/posts/"));
      return import.meta.env.DEV || p.frontmatter.publish;
    })
    .map((p) => {
      const page = { ...p };
      const slug = p.file.split("/src/posts/").pop().split(".")[0];
      page.slug = slug;
      page.content = fs.readFileSync(p.file, "utf8");
      // page.content = await fetchMDXContent(p.file);
      pages[slug] = page;
      return {
        params: {
          slug,
        },
        props: { post: page },
      };
    });
  out = out.map((entry) => {
    const slug = entry.params.slug;
    const page = pages[slug];
    console.log("slug", slug);
    page.breadcrumbs = slug.split("/").slice(0, -1);
    const { frontmatter } = page;
    const { prev, next } = frontmatter;
    page.frontmatter.date = new Date(page.frontmatter.date);
    console.log("frontmatter for", slug, frontmatter);
    const updated = {
      ...entry,
      props: {
        post: {
          ...entry.props.post,
          ...(prev
            ? { prev: pages[slug.replace(slug.split("/").pop(), prev)] }
            : {}),
          ...(next
            ? { next: pages[slug.replace(slug.split("/").pop(), next)] }
            : {}),
        },
      },
    };
    if (
      ("prev" in updated.props && !updated.props.prev) ||
      ("next" in updated.props && !updated.props.next)
    ) {
      throw Exception("prev or next is not correct for slug " + slug);
    }
    return updated;
  });
  console.log("final out", out);
  return out;
}

const authorLinks = {
  "Blake Sanie": "/",
};

const { Content, frontmatter, prev, next, breadcrumbs, content, slug } =
  Astro.props.post;
const { title, description, date, image, author } = frontmatter;
---

<HeaderAndFooter
  allowMainStyles
  title={title + " | Blog"}
  description={description}
  image={image}
>
  <SEO
    slot="head"
    title={title + " | Blog"}
    description={description}
    openGraph={{
      basic: {
        title: title + " | Blog",
        type: "article",
        image: image,
      },
      optional: {
        description: description,
      },
      article: {
        publishedTime: date.toISOString(),
        modifiedTime: date.toISOString(),
        author: author.split(","),
      },
      image: {
        type: "image/" + image.split(".").pop(),
        // width: width,
        // height: height,
        alt: "",
      },
    }}
    extend={{}}
  />
  <!-- https://jsonld.com/blog-post/ -->
  <Fragment
    slot="head"
    set:html={`<script type="application/ld+json">
        { "@context": "https://schema.org", 
         "@type": "BlogPosting",
         "headline": "${title}",
         "editor": "Blake Sanie", 
         "url": "https://blakesanie.com/blog/${slug}",
         "description": "${description}",
         "datePublished": "${date.toISOString().split("T")[0]}",
         "dateCreated": "${date.toISOString().split("T")[0]}",
         "dateModified": "${date.toISOString().split("T")[0]}",
         "wordcount": "${content.split(" ").length}",
         "articleBody": "${description}",
           "author": {
            "@type": "Person",
            "name": "Blake Sanie"
          }
         }
        </script>`}
  />

  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/katex@0.15.2/dist/katex.min.css"
    integrity="sha384-MlJdn/WNKDGXveldHDdyRP1R4CTHr3FeuDNfhsLPYrq2t0UBkUdK2jyTnXPEK1NQ"
    crossorigin="anonymous"
/>
  {
    breadcrumbs.length > 0 && (
      <BreadCrumbs breadcrumbs={breadcrumbs} base="/blog" />
    )
  }
  <h1>{title}</h1>
  <!-- <div id="date">
    {date.toISOString()}
  </div> -->
  <span class="byline">
    <a class="author" href={authorLinks[author]} target="_blank">{author}</a>{
      " | " + formatDate(date)
    }</span
  >
  <Content />
  {
    prev && (
      <a href={"/blog/" + prev.slug}>
        <Button>
          {"Rewind"}
          <br />
          {prev.frontmatter.title}
        </Button>
      </a>
    )
  }
  {
    next && (
      <a href={"/blog/" + next.slug}>
        <Button>
          {"Up Next"}
          <br />
          {next.frontmatter.title}
        </Button>
      </a>
    )
  }
</HeaderAndFooter>

<style>
  :global(.inlineImg) {
    /* max-width: 800px; */
  }
  :global(.pageContent) {
    padding-bottom: 100px;
  }
  :global(.pageContent .embed) {
    max-width: 300px;
  }
  :global(.pageContent > *) {
    width: min(100%, 800px);
  }
  :global(.pageContent > .center *) {
    text-align: center;
    text-indent: 0;
    color: black;
  }
  :global(.math) {
    color: black;
    font-size: 1.1em;
    letter-spacing: 0.05em;
    padding: 0.6em 0;
    text-indent: 0;
    text-align: center;
    display: block;
  }
  :global(.math * ) {

    font-family: KaTeX_Main, "Times New Roman", serif;
  }
  :global(.allInline .math) {
    display: inline;
  }
  :global(.allInline:not(.center) .math) {
    font-size: 0.85em;
  }
  :global(.math .base > .mord) {
    /* padding: 0 0.1em; */
  }
  :global(.math .sizing > .mtight) {
    margin-right: 0.2em;
  }
  :global(.math .mpunct) {
    margin-right: 0.2em;
  }
  /* :global(.math *) {
    font-size: 1.5em;
  } */
  :global(.pageContent a:not(.pageContent > *)) {
    border-bottom: 2px solid var(--headerColor);
    color: black !important;
    font-weight: 1000;
    transition: color 0.1s ease;
  }
  :global(.pageContent a:not(.pageContent > *):hover) {
    color: var(--headerColor) !important;
  }
  /* :global(.pageContent a::after) {
    content: "â†—";
    font-size: 50%;
    top: -0.6em;
    position: relative;
    font-weight: 1000;
  } */
  .byline {
    text-align: center;
    color: #777;
    font-size: 1em;
    margin-top: -1.5em;
    margin-bottom: 1.5em;
  }
  :global(.pageContent p code, .pageContent .allInline:not(.center) .math) {
    background-color: rgba(0, 0, 0, 0.1);
    color: black;
    padding: 0.2em 0.4em;
    margin: 0 0.2em;
    border-radius: 0.3em;
    font-weight: 600;
  }
  :global(.italic) {
    font-style: italic;
  }
  :global(.bold) {
    font-weight: 600;
    color: black;
  }
</style>

<!-- <script>
  const headings = document
    .querySelector(".pageContent")
    .querySelectorAll("h1, h2, h3, h4, h5, h6");
  headings.forEach((heading) => {
    const id = heading.id;
    if (id) {
      heading.addEventListener("click", function () {
        alert("click");
      });
    }
  });
</script> -->

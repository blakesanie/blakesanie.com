---
import { GoogleFontsOptimizer } from "astro-google-fonts-optimizer";
import CommonHead from "./CommonHead.astro";
import { SEO } from "astro-seo";
import { renderImg } from "astro-imagetools/api";
import HoverZone from "./HoverZone.astro";
import Icon from "astro-icon";
import NavLink from "./NavLink.astro";
import NowPlaying from "./NowPlaying.astro";
import SoundBars from "./SoundBars.astro";
// import Newsletter from "../Newsletter/index.astro";
const mobileMaxWidth = 800; // still manually declared in media query declaration
const headerWidth = 130;
const mobileHeaderHeight = 80;
const headerHeightTransitionDuration = 0.1;
const headerPositionTransitionDuration = 0.3;

let headerColor = Astro.props.color || "#007ED4bb";
const headerColorOpaque = Astro.props.colorOpaque || `rgb(106, 160, 219)`

Astro.props.themeColor = Astro.props.themeColor || "rgb(72, 161, 223)";
const textColor = Astro.props.darkText ? "black" : "white";
const navPadding = 0.5; // was 0.6 em
const isHome = Astro.props.isHome;
const { allowMainStyles, noContentPadding, hideSpotify } = Astro.props;
const hoverZoneBehind = isHome || Astro.props.hoverZoneBehind;

// console.log("title, desc", title, description, "props", Astro.props);
---

<CommonHead {...Astro.props} bodyClasslist={[{ isHome: isHome }]}>
  <header class:list={[{ darkText: textColor == "black" }]}>
    <svg
      id="hamburger"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 100 100"
    >
      <line x1="10" y1="20" x2="90" y2="20"></line>
      <line x1="10" y1="50" x2="90" y2="50"></line>
      <line x1="10" y1="80" x2="90" y2="80"></line>
    </svg>
    <a id="logo" href="/">Blake Sanie</a>
    <div id="bio">
      <span>Software Engineer.</span>
      <span>Photographer.</span>
      <span>Triathlete.</span>
      <span>Lifelong Student.</span>
    </div>
    <nav>
      {
        (isHome || Astro.props.pageNotInNav) && (
          <HoverZone
            style={{
              height: 0,
              opacity: 0,
              zIndex: Astro.props.pageNotInNav ? 1 : 0,
            }}
            class="active"
          />
        )
      }
      <ul>
        <div class="navSection">
          <p>Online</p>
          <!-- <NavLink
            hoverZoneBehind={hoverZoneBehind}
            icon="uil:envelope-heart"
            href="/newsletter"
            textColor={textColor}
            chip="Weekly"
          >
            Newsletter
          </NavLink> -->
          <NavLink
            hoverZoneBehind={hoverZoneBehind}
            icon="majesticons:newspaper-line"
            href="/press"
            textColor={textColor}
          >
            Press
          </NavLink>
          <NavLink
            hoverZoneBehind={hoverZoneBehind}
            icon="jam:write"
            href="/blog"
            textColor={textColor}
            chip="Newsletter"
          >
            Blog
          </NavLink>
        </div>
        <div class="navSection">
          <p>Engineering</p>
          <NavLink
            hoverZoneBehind={hoverZoneBehind}
            icon="majesticons:applications-add-line"
            href="/projects"
            textColor={textColor}
          >
            Projects
          </NavLink>
          <NavLink
            hoverZoneBehind={hoverZoneBehind}
            icon="majesticons:paper-clip-line"
            href="/resume"
            chip="M.S."
            chipIcon="majesticons:academic-cap-line"
            textColor={textColor}
          >
            Résumé
          </NavLink>
          <!-- <NavLink hoverZoneBehind={hoverZoneBehind}} icon="majesticons:users-line" href="/consultation">
              Consultations
            </NavLink> -->
          <NavLink
            hoverZoneBehind={hoverZoneBehind}
            icon="uil:github-alt"
            href="/github"
            textColor={textColor}
          >
            GitHub
          </NavLink>
        </div>
        <div class="navSection">
          <p>Photography</p>
          <NavLink
            hoverZoneBehind={hoverZoneBehind}
            icon="majesticons:dashboard-line"
            href="/photo"
            id="photoNavLink"
            textColor={textColor}
          >
            Gallery
          </NavLink>
          <NavLink
            hoverZoneBehind={hoverZoneBehind}
            icon="tabler:map-2"
            href="/photo/map"
            id="mapNavLink"
            textColor={textColor}
          >
            GPS Map
          </NavLink>
          <!-- <NavLink hoverZoneBehind={hoverZoneBehind}}
              icon="ion:calendar-outline"
              href="/photo/book"
              chip="ATL"
              chipIcon="uil:map-pin"
            >
              Booking
            </NavLink> -->
        </div>

        <!-- <div class="navSection">
            <p>Content</p>
            <NavLink hoverZoneBehind={hoverZoneBehind}} icon="ic:round-candlestick-chart" href="/quant">
              Quant Research
            </NavLink>
            <NavLink hoverZoneBehind={hoverZoneBehind}}
              icon="majesticons:newspaper-line"
              href="/blog"
              chip="11K"
              chipIcon="majesticons:eye-line"
            >
              Blog
            </NavLink>
            <NavLink hoverZoneBehind={hoverZoneBehind}} icon="ion:baseball-outline" href="/mlbVis">
              r/mlbVis
            </NavLink>
          </div> -->
        <div class="navSection">
          <p>Connect</p>
          <NavLink
            hoverZoneBehind={hoverZoneBehind}
            icon="la:strava"
            href="/strava"
            chip="Lake Placid"
            textColor={textColor}
          >
            Strava
          </NavLink>
          <NavLink
            class="email"
            hoverZoneBehind={hoverZoneBehind}
            icon="majesticons:mail-line"
            href="/email"
            textColor={textColor}
          >
            Email
          </NavLink>
          <NavLink
            class="contactCard"
            hoverZoneBehind={hoverZoneBehind}
            icon="ic:outline-person-pin"
            href="/contact.vcf"
            textColor={textColor}
          >
            Contact Card
          </NavLink>

          <NavLink
            hoverZoneBehind={hoverZoneBehind}
            icon="lucide:linkedin"
            href="/linkedin"
            textColor={textColor}
          >
            LinkedIn
          </NavLink>
          <NavLink
            hoverZoneBehind={hoverZoneBehind}
            icon="lucide:instagram"
            href="/instagram"
            textColor={textColor}
          >
            Instagram
          </NavLink>
        </div>
        {
          !hideSpotify && (
            <div class="navSection" id="nowPlayingSection">
              <p>
                Now Playing
                <SoundBars n={4} color={textColor} />
              </p>
              <NowPlaying
                shadowColor={textColor == "white" ? "black" : "white"}
                textColor={textColor}
              />
            </div>
          )
        }
      </ul>
    </nav>
    <p id="made">
      Crafted by <wbr/>Blake Sanie with <a
        href="https://docs.astro.build/en/getting-started/"
        target="_blank"><Icon pack="simple-icons" name="astro" /></a
      > and <Icon pack="ri" name="heart-2-line" />
    </p>
    <div id="below">
      <div>More Below</div>
      </div>
  </header>

  <main
    class:list={[
      {
        pageContent: allowMainStyles,
        noPageContentPadding: noContentPadding,
      },
      Astro.props.mainClass,
    ]}
  >
    <slot />
  </main>
  <footer></footer>
  <slot name="topLevel" />
  <!-- <Newsletter /> -->
</CommonHead>
<style is:global>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  a,
  a:visited,
  a:active {
    text-decoration: initial;
    color: inherit !important;
  }
  input:disabled {
    cursor: no-drop;
  }
</style>

<!-- __                __
            /  |              /  |
  _______  _$$ |_    __    __ $$ |  ______
 /       |/ $$   |  /  |  /  |$$ | /      \
/$$$$$$$/ $$$$$$/   $$ |  $$ |$$ |/$$$$$$  |
$$      \   $$ | __ $$ |  $$ |$$ |$$    $$ |
 $$$$$$  |  $$ |/  |$$ \__$$ |$$ |$$$$$$$$/
/     $$/   $$  $$/ $$    $$ |$$ |$$       |
$$$$$$$/     $$$$/   $$$$$$$ |$$/  $$$$$$$/
                    /  \__$$ |
                    $$    $$/
                     $$$$$$/                 -->
<style
    define:vars={{
      headerWidth: headerWidth + "px",
      mobileHeaderHeight: mobileHeaderHeight + "px",
      headerHeight: mobileHeaderHeight + "px",
      headerHeightTransitionDuration: headerHeightTransitionDuration + "s",
      headerPositionTransitionDuration: headerPositionTransitionDuration + "s",
      headerColor,
      headerColorOpaque,
      mobileMaxWidth: mobileMaxWidth + "px",
      navPadding: navPadding + "em",
      textColor,
    }}
>
  body {
    font-size: 16px;
    font-weight: 500;
    max-width: 100%;
    overflow-x: hidden;
  }
  :global(*) {
    font-family: "Assistant", sans-serif;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  }
  :global(button) {
    color: black;
  }
  header {
    background: var(--headerColor);
    position: fixed;
    width: var(--headerWidth);
    height: 100vh;
    /* overflow: hidden; */
    overflow-x: hidden;
    color: var(--textColor);
    display: flex;
    flex-direction: column;
    /* justify-content: center; */
    align-items: center;
    padding: 1.4em 0;
    --side-padding: 0.7em;
    overflow-y: scroll;
    isolation: isolate;
    z-index: 1;
    /* padding-left: var(--side-padding); */
  }
  header :global(a),
  header :global(a:visited),
  header :global(a:active) {
    /* color: white; */
  }
  :global(a:visited) {
    color: initial;
  }
  #hamburger {
    display: none;
    position: absolute;
    left: 10px;
    top: 10px;
    opacity: 0.4;
    height: 24px;
    width: 24px;
    stroke-width: 12px;
    stroke-linecap: round;
    cursor: pointer;
    transition: all 0.1s ease;
  }
  #hamburger:hover {
    opacity: 1;
  }
  .expanded #hamburger {
    transform: rotate(90deg);
  }
  main {
    flex: 1;
    /* background-color: white; */
    margin-left: var(--headerWidth);
    isolation: isolate;
    /* z-index: -10; */
  }
  #logo {
    font-size: 1.3em;
    font-weight: 500;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 4em;
    padding: 0.5em 0;
    min-height: 4em;
    //margin: 0 var(--navPadding);
    text-align: center;
    line-height: 1.4em;
    --logoCorner: 0;
    border-radius: calc(var(--logoCorner) * 1%);
    //border: 1px solid rgba(255,0,0,0.1);
    //background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3e%3cpath d='M10,0 H90 Q100,0 100,10 V90 Q100,100 90,100 H10 Q0,100 0,90 V10 Q0,0 10,0 Z' fill='none' stroke='white' stroke-width='4' stroke-dasharray='4%2c 10' stroke-dashoffset='10' stroke-opacity='0.4' stroke-linecap='square' stroke-location='inside'/%3e%3c/svg%3e");
    background-image: url("data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' stroke='white' stroke-width='3' stroke-dasharray='2%2c 8' stroke-dashoffset='0' stroke-opacity='0.4' stroke-linecap='square' rx='0' ry='0'/%3e%3c/svg%3e");
  }
  :global(.darkText) #logo {
    //background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3e%3cpath d='M10,0 H90 Q100,0 100,10 V90 Q100,100 90,100 H10 Q0,100 0,90 V10 Q0,0 10,0 Z' fill='none' stroke='black' stroke-width='4' stroke-dasharray='6%2c 12' stroke-dashoffset='10' stroke-opacity='0.4' stroke-linecap='square' stroke-location='outside'/%3e%3c/svg%3e");
    background-image: url("data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' stroke='black' stroke-width='3' stroke-dasharray='2%2c 8' stroke-dashoffset='0' stroke-opacity='0.4' stroke-linecap='square' rx='0' ry='0'/%3e%3c/svg%3e");
  }
  #bio {
    font-size: 0.8em;
    font-weight: 600;
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: 1em;
    margin-bottom: 2em;
    opacity: 0.8;
  }
  #bio > * {
    padding: 0.15em 0;
  }
  nav {
    width: 100%;
    position: relative;
    --borderRounding: 0.6em;
    --flangeRadius: 0.6em;
    /* padding-left: var(--side-padding); */
    /* border: 1px solid red; */
  }
  nav ul {
    display: flex;
    flex-direction: column;
  }
  /* nav li {
    list-style: none;
    padding-right: var(--side-padding);
  } */
  /* nav li a {
    display: flex;
    align-items: center;
    padding: 0.6em;
    font-size: 1em;
    border-radius: 0.4em;
    transition: all 0.2s ease;
  } */
  /* nav li a:hover {
    background-color: rgba(255, 255, 255, 0.14);
  } */
  .navSection {
    margin-bottom: 1em;
    display: flex;
    flex-direction: column;
    /* border: 1px solid red; */
  }
  .navSection p {
    font-size: 0.8em;
    opacity: 0.8;
    font-weight: 600;
    margin-bottom: 0.5em;
    padding-left: calc(var(--navPadding) * 2);
    display: flex;
    align-items: center;
    /* align-items: center; */
    /* font-weight: 600; */
  }

  :global(.touch .email) {
    display: none;
  }

  :global(.no-touch .contactCard) {
    display: none;
  }

  #made {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    padding: 0 1.7em;
    font-size: 0.8em;
    /* color: rgba(255, 255, 255, 0.5); */
    color: var(--textColor);
    opacity: 0.5;
    text-align: center;
  }

  #made [astro-icon] {
    display: block;
    height: 1.6em;
    margin: 0.4em;
  }
  #spotifyIcon {
    width: 1.5em;
    margin-left: 0.4em;
    filter: saturate(0) brightness(100);
  }

  :global(.shadowHover) {
    box-shadow: 0 0 2em 0 rgba(0, 0, 0, 0.1);
    transition: all 0.1s ease;
    cursor: pointer;
  }
  :global(.shadowHover:hover) {
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.1);
  }

  #below {
    position: fixed;
    bottom: 0;
    width: var(--headerWidth);

    //padding-top: 100px;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    padding-top: 100px;
    pointer-events: none;
  }

  #below > div {
    //backdrop-filter: blur(4px);
    //background: rgba(255,255,255,0.1);
    border:1px solid var(--textColor);
    width: auto;
    border-bottom: none;
    padding: 0.3em 1em;
    border-top-left-radius: 1em;
    border-top-right-radius: 1em;
    background: var(--headerColorOpaque);
    //background: linear-gradient(to bottom, transparent, rgba(255,255,255,0.2) 50%);
    font-size: 0.8em;
    animation: bounce 1.5s infinite ease-in-out;
    box-shadow:
        0 0 1em 1em rgba(255,255,255,0.0),
        0 0 2em 2em var(--headerColorOpaque);
    cursor: default;
  }

  @keyframes bounce {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(0.4em);
    }
    100% {
      transform: translateY(0);
    }
  }

  @media screen and (max-width: 800px) {
    header {
      width: 100%;
      padding: 0.7em 0;
      /* height: auto; */
      height: var(--headerHeight);
      /* margin-top: calc(-1 * var(--mobileHeaderHeight)); */
      top: 0;
      backdrop-filter: blur(6px);
      overflow: hidden;
      /* overflow: visible; */
    }
    header.expanded {
      overflow-y: scroll;
      max-height: 100dvh;
      /* position: absolute !important; */
    }
    .headerTransitionable {
      transition: height var(--headerHeightTransitionDuration) ease;
    }
    .transitionHeaderPosition {
      transition: transform var(--headerPositionTransitionDuration) ease;
    }
    #hamburger {
      display: block;
      stroke: var(--textColor);
    }
    main {
      margin-top: var(--mobileHeaderHeight);
      margin-left: 0;
    }
    #logo {
      font-size: 1.2em;
      padding: 0.3em 0.9em;
      width: auto;
      min-height: auto;
      --logoCorner: 0;
      background-image: url("data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' stroke='white' stroke-width='3' stroke-dasharray='2%2c 8' stroke-dashoffset='0' stroke-opacity='0.4' stroke-linecap='square'/%3e%3c/svg%3e");
    }
    :global(.darkText) #logo {
      background-image: url("data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' stroke='black' stroke-width='3' stroke-dasharray='2%2c 8' stroke-dashoffset='0' stroke-opacity='0.4' stroke-linecap='square'/%3e%3c/svg%3e");
    }
    #bio {
      flex-direction: row;
      font-size: 0.8em;
      margin-top: 0.5em;
      margin-bottom: 2em;
      padding: 0 0.6em;
    }
    #bio > * {
      padding: 0 0.3em;
    }
    nav {
      --navPadding: 0.4em;
      padding: 0 0.5em;
    }
    nav ul {
      flex-direction: row;
      justify-content: center;
      flex-wrap: wrap;
    }
    nav ul > * {
      /* min-width: 140px; */
    }
    .navSection {
      /* align-items: center; */
    }
    #below {
      display: none;
    }
  }

  @media screen and (max-width: 430px) {
    header {
      padding-top: 0;
    }
    #logo {
      padding: 0 1em;
      line-height: 46px;
      margin: 17px 0;
      font-size: 1.4em;
    }
    #bio {
      /* display: none; */
      flex-wrap: wrap;
      justify-content: center;
      margin-top: 0;
    }
    nav ul {
      flex-direction: column;
      /* padding-left: 1em; */
      max-width: 300px;
      margin-left: auto;
      margin-right: auto;
    }
    .navSection {
      width: 100%;
    }
    #hamburger {
      top: 28px;
      left: 16px;
    }
  }
</style>

<style>
  .pageContent {
    padding: 2em 2em;
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
  }

  .pageContent :global(*)::selection {
    /* background: rgba(255, 170, 0, 0.576); */
    /* color: white; */
    /* background: var(--headerColor); */
    /* background: linear-gradient(
          rgba(255, 170, 0, 0.576) 0%,
          rgba(255, 170, 0, 0.576) 100%
        );
        color: red; */
    /* text-shadow: 1px 1px 2px black; */
    /* color: white;
        background: rgba(0, 0, 0, 0.131); */
  }

  .pageContent > :global(*) {
    max-width: 1100px;
  }

  .pageContent :global(h1),
  .pageContent :global(h2),
  .pageContent :global(h3),
  .pageContent :global(h4),
  .pageContent :global(h5),
  .pageContent :global(h6) {
    text-align: center;
    padding-top: 1em;
    padding-bottom: 0.5em;
  }

  /* .pageContent :global(h4),
      .pageContent :global(h5),
      .pageContent :global(h6) {
        padding: 1.4em 0 0.8em 0;
      } */

  .pageContent :global(h1) {
    font-size: 2em;
    padding-top: 1em;
    padding-bottom: 1em;
  }

  .pageContent :global(h2) {
    font-size: 1.6em;
  }

  .pageContent :global(h3) {
    font-size: 1.3em;
  }

  .pageContent :global(h4) {
    font-size: 1.1em;
  }

  .pageContent :global(h5) {
    font-size: 1em;
  }

  .pageContent :global(h6) {
    font-size: 0.9em;
  }

  .pageContent :global(p),
  .pageContent :global(li) {
    font-size: 1.2rem;
    color: #666;
    line-height: 150%;
    /* padding: 0.5em 0; */
  }

  .pageContent :global(p) {
    padding: 0.5em 0;
    text-indent: 1.2em;
  }

  .pageContent :global(li > p) {
    text-indent: 0em;
  }

  .pageContent :global(strong) {
    color: black;
  }

  .pageContent :global(ul),
  .pageContent :global(ol) {
    padding-left: 2.5em;
  }

  .pageContent :global(li) {
    /* line-height: 150%; */
    /* padding: 0.3em 0; */
    padding-left: 0.2em;
  }

  .noPageContentPadding {
    padding: 0 !important;
  }

  .pageContent :global(table) {
    border-spacing: 0;
  }

  .pageContent :global(.x-scroll) {
    overflow-x: scroll;
    width: auto;
    max-width: 100%;
    border: 2px solid rgba(0, 0, 0, 0.2);
    border-radius: 6px;
  }

  .pageContent :global(td:empty) {
    display: none;
  }

  .pageContent :global(td[colspan]) {
    text-align: center;
  }

  .pageContent :global(.subText) {
    font-size: 0.8em;
    opacity: 0.6;
    font-style: italic;
  }

  .pageContent :global(th),
  .pageContent :global(td) {
    padding: 1em;
  }

  .pageContent :global(thead),
  .pageContent :global(tr:nth-child(even)) {
    background: rgba(0, 0, 0, 0.04);
  }

  .pageContent :global(td:not(:first-child)) {
    border-left: 2px solid rgba(0, 0, 0, 0.2);
  }
</style>


<script
  define:vars={{
    mobileHeaderHeight: mobileHeaderHeight,
    headerHeightTransitionDuration,
    headerPositionTransitionDuration,
    mobileMaxWidth,
    navPadding,
    isHome,
    hoverZoneBehind,
  }}
>
  //  __    __                             __    __
  // /  \  /  |                           /  |  /  |
  // $$  \ $$ |  ______   __     __       $$ |  $$ |  ______   __     __  ______    ______
  // $$$  \$$ | /      \ /  \   /  |      $$ |__$$ | /      \ /  \   /  |/      \  /      \
  // $$$$  $$ | $$$$$$  |$$  \ /$$/       $$    $$ |/$$$$$$  |$$  \ /$$//$$$$$$  |/$$$$$$  |
  // $$ $$ $$ | /    $$ | $$  /$$/        $$$$$$$$ |$$ |  $$ | $$  /$$/ $$    $$ |$$ |  $$/
  // $$ |$$$$ |/$$$$$$$ |  $$ $$/         $$ |  $$ |$$ \__$$ |  $$ $$/  $$$$$$$$/ $$ |
  // $$ | $$$ |$$    $$ |   $$$/          $$ |  $$ |$$    $$/    $$$/   $$       |$$ |
  // $$/   $$/  $$$$$$$/     $/           $$/   $$/  $$$$$$/      $/     $$$$$$$/ $$/
  const nav = document.querySelector("nav");
  const anchors = document.querySelectorAll(
    "nav .navSection:not(#nowPlayingSection) a"
  );
  const mouseOffSections = document.querySelectorAll(
    //".navSection, .navSection p"
    "nav"
  );
  const mouseNoFocusSections = document.querySelectorAll("#nowPlayingSection");

  let activeNavHoverZone = document.querySelector(".active .navHoverZone");
  let activeAnchor = activeNavHoverZone?.parentElement;
  let hoverZone;
  let baseHeight;
  let baseWidth;
  let baseY;
  let baseX;

  function isTouchScreen() {
    return (
      "ontouchstart" in window ||
      navigator.maxTouchPoints > 0 ||
      navigator.msMaxTouchPoints > 0
    );
  }

  const isTouch = isTouchScreen();
  document.body.classList.add(isTouch ? "touch" : "no-touch");

  let menuExpanded = false;

  for (let i = 0; i < anchors.length; i++) {
    if (!isTouch) {
      anchors[i].addEventListener("mouseenter", (e) => {
        moveHoverToAnchor(anchors[i]);
      });
    }
    anchors[i].addEventListener("click", (e) => {
      // console.log("clicked anchor", anchors[i]);
      // activeAnchor.classList.remove("active"); // line not necessary since activeAnchor variable changed anyways
      activeAnchor = anchors[i];
      if (menuExpanded) {
        // header.style.setProperty(
        //   "--headerHeight",
        //   mobileHeaderHeight + "px"
        // );
      }
      // activeAnchor.classList.add("active");
      // anchors[i].parentElement.classList.add("active"); // line not necessary since activeAnchor variable changed anyways
      moveHoverToAnchor(anchors[i]);
      // e.preventDefault();
      // e.stopPropagation();
    });
  }
  if (!isTouch) {
    for (let i = 0; i < mouseOffSections.length; i++) {
      mouseOffSections[i].addEventListener("mouseleave", (e) => {
        moveHoverToAnchor();
      });
    }
    for (let i = 0; i < mouseNoFocusSections.length; i++) {
      mouseNoFocusSections[i].addEventListener("mouseenter", (e) => {
        moveHoverToAnchor();
      });
    }
  }

  let currentHoverAnchor;

  function moveHoverToAnchor(anchor) {
    if (!hoverZone) {
      if (isHome || !activeNavHoverZone) {
        // debugger;
        // if active page not in nav, hover zone is already a direct child of nav
        // without transition, move directly to the hovered anchor
        hoverZone = document.querySelector(".navHoverZone");
        // hoverZone.classList.remove("hoverZoneTransition");
        // hoverZone.style.transition = "none";
        hoverZone.style.height = anchor.offsetHeight + "px";
        // hoverZone.style.width = `calc(${anchor.offsetWidth}px - ${navPadding}em)`;
      } else {
        // active page in nav
        // move hover zone to direct child of nav, and relocate to original space
        baseHeight = activeNavHoverZone.offsetHeight;
        baseWidth = activeNavHoverZone.offsetWidth;
        baseY = activeNavHoverZone.parentElement.offsetTop;
        baseX = activeNavHoverZone.parentElement.offsetLeft;
        hoverZone = hoverZoneBehind
          ? nav.insertBefore(activeNavHoverZone, nav.firstChild)
          : nav.appendChild(activeNavHoverZone);

        hoverZone.style.transform = `translate(${baseX}px,${baseY}px)`;
        hoverZone.style.height = baseHeight + "px";
        hoverZone.style.width = baseWidth + "px";
        hoverZone.classList.add("hoverZoneTransition");
      }
    }
    if (!anchor) {
      // no paramter means hover interaction is done
      if (isHome || !activeNavHoverZone) {
        // just fade out
        hoverZone.style.opacity = 0;
      } else {
        if (currentHoverAnchor) {
          // remove hover class from last hovered anchor
          currentHoverAnchor.classList.remove("hover");
        }
        // move hover zone back to original space
        // debugger;
        hoverZone.style.transform = `translate(${activeAnchor.offsetLeft}px, ${activeAnchor.offsetTop}px)`;
        hoverZone.style.height = activeAnchor.offsetHeight + "px";
        hoverZone.style.width = activeAnchor.offsetWidth + "px";
      }
      // setTimeout(() => {
      //   hoverZone.classList.add("hoverZoneTransition");
      // }, 10);
      // hoverZone.classList.add("hoverZoneTransition");
      return;
    }
    // at this point, move hover zone to hovered anchor
    const targetY = anchor.offsetTop;
    const targetX = anchor.offsetLeft;
    if (currentHoverAnchor) {
      // old hovered anchor is no longer hovered
      currentHoverAnchor.classList.remove("hover");
    }
    anchor.classList.add("hover");
    currentHoverAnchor = anchor;
    // if (isHome && hoverZone.style.opacity != 1) {
    //   hoverZone.classList.remove("hoverZoneTransition");
    // }
    // move to target space
    hoverZone.style.transform = `translate(${targetX}px, ${targetY}px)`;
    hoverZone.style.height = anchor.offsetHeight + "px";

    if (window.innerWidth <= 800) {
      hoverZone.style.width = `calc(${anchor.offsetWidth + "px"})`;
    } else {
      if (isHome) {
        hoverZone.style.width = `calc(${
          anchor.offsetWidth + "px"
        } - var(--navPadding) * 2)`;
      } else {
        hoverZone.style.width = `calc(${anchor.offsetWidth + "px"})`;
      }
    }

    // if (isHome && hoverZone.style.opacity != 1) {
    //   hoverZone.style.transition = "all 0.2s ease";
    // }
    // hoverZone.style.transition = "all 0.2s ease";
    hoverZone.classList.add("hoverZoneTransition");
    hoverZone.style.opacity = 1;
  }

  // fixes transition remaining on resize from mobile to desktop
  let reinstateTransitionTimeout;

  window.addEventListener("resize", function () {
    if (hoverZone) {
      clearInterval(reinstateTransitionTimeout);
      hoverZone.classList.remove("hoverZoneTransition");
      reinstateTransitionTimeout = setTimeout(() => {
        hoverZone.classList.add("hoverZoneTransition");
      }, 50);
    }
  });

  //  __    __                            __                             ______                                 __  __
  // /  |  /  |                          /  |                           /      \                               /  |/  |
  // $$ |  $$ |  ______    ______    ____$$ |  ______    ______        /$$$$$$  |  _______   ______    ______  $$ |$$ |
  // $$ |__$$ | /      \  /      \  /    $$ | /      \  /      \       $$ \__$$/  /       | /      \  /      \ $$ |$$ |
  // $$    $$ |/$$$$$$  | $$$$$$  |/$$$$$$$ |/$$$$$$  |/$$$$$$  |      $$      \ /$$$$$$$/ /$$$$$$  |/$$$$$$  |$$ |$$ |
  // $$$$$$$$ |$$    $$ | /    $$ |$$ |  $$ |$$    $$ |$$ |  $$/        $$$$$$  |$$ |      $$ |  $$/ $$ |  $$ |$$ |$$ |
  // $$ |  $$ |$$$$$$$$/ /$$$$$$$ |$$ \__$$ |$$$$$$$$/ $$ |            /  \__$$ |$$ \_____ $$ |      $$ \__$$ |$$ |$$ |
  // $$ |  $$ |$$       |$$    $$ |$$    $$ |$$       |$$ |            $$    $$/ $$       |$$ |      $$    $$/ $$ |$$ |
  // $$/   $$/  $$$$$$$/  $$$$$$$/  $$$$$$$/  $$$$$$$/ $$/              $$$$$$/   $$$$$$$/ $$/        $$$$$$/  $$/ $$/
  let prevScroll = 0;
  let prevScrollTimestamp = 0;
  let menuIsDown = false;
  var existingInterval;
  const moveHeaderDown = (isDown, isAnimated) => {
    header.style.position = "fixed";
    if (existingInterval) {
      clearTimeout(existingInterval);
    }
    if (isAnimated) {
      header.classList.add("transitionHeaderPosition");
    }
    if (isDown) {
      header.style.transform = "none";
    } else if (!menuExpanded) {
      header.style.transform = `translateY(${-100}%)`;
    }
    // header.style.transform = `translateY(${isDown ? 0 : -100}%)`;
    if (isAnimated) {
      existingInterval = setTimeout(() => {
        header.classList.remove("transitionHeaderPosition");
      }, headerPositionTransitionDuration * 1000);
    }
  };
  window.addEventListener("scroll", () => {
    if (window.innerWidth > mobileMaxWidth) {
      return;
    }
    const currentScroll = window.scrollY;
    const timestamp = new Date();
    const scrollVelocity =
      (currentScroll - prevScroll) / (timestamp - prevScrollTimestamp);
    if (currentScroll <= 0) {
      menuIsDown = false;
      header.style.position = "fixed";
    } else if (currentScroll <= mobileHeaderHeight) {
      if (menuIsDown) {
      } else if (!menuExpanded) {
        header.style.position = "absolute";
        header.style.transform = "none";
      }
    } else if (
      currentScroll > mobileHeaderHeight &&
      prevScroll <= mobileHeaderHeight
    ) {
      if (menuIsDown) {
      } else {
        moveHeaderDown(false, false);
        menuIsDown = false;
      }
    } else if (scrollVelocity > 0) {
      moveHeaderDown(false, true);
      menuIsDown = false;
    } else if (scrollVelocity < -0.8) {
      moveHeaderDown(true, true);
      menuIsDown = true;
    }
    prevScroll = currentScroll;
    prevScrollTimestamp = timestamp;
  });
  //  __       __                                      ________                                                    __
  // /  \     /  |                                    /        |                                                  /  |
  // $$  \   /$$ |  ______   _______   __    __       $$$$$$$$/  __    __   ______    ______   _______    _______ $$/   ______   _______
  // $$$  \ /$$$ | /      \ /       \ /  |  /  |      $$ |__    /  \  /  | /      \  /      \ /       \  /       |/  | /      \ /       \
  // $$$$  /$$$$ |/$$$$$$  |$$$$$$$  |$$ |  $$ |      $$    |   $$  \/$$/ /$$$$$$  | $$$$$$  |$$$$$$$  |/$$$$$$$/ $$ |/$$$$$$  |$$$$$$$  |
  // $$ $$ $$/$$ |$$    $$ |$$ |  $$ |$$ |  $$ |      $$$$$/     $$  $$<  $$ |  $$ | /    $$ |$$ |  $$ |$$      \ $$ |$$ |  $$ |$$ |  $$ |
  // $$ |$$$/ $$ |$$$$$$$$/ $$ |  $$ |$$ \__$$ |      $$ |_____  /$$$$  \ $$ |__$$ |/$$$$$$$ |$$ |  $$ | $$$$$$  |$$ |$$ \__$$ |$$ |  $$ |
  // $$ | $/  $$ |$$       |$$ |  $$ |$$    $$/       $$       |/$$/ $$  |$$    $$/ $$    $$ |$$ |  $$ |/     $$/ $$ |$$    $$/ $$ |  $$ |
  // $$/      $$/  $$$$$$$/ $$/   $$/  $$$$$$/        $$$$$$$$/ $$/   $$/ $$$$$$$/   $$$$$$$/ $$/   $$/ $$$$$$$/  $$/  $$$$$$/  $$/   $$/
  //                                                                      $$ |
  //                                                                      $$ |
  //                                                                      $$/
  // let menuExpanded = false;
  const header = document.querySelector("header");

  const hamburger = document.getElementById("hamburger");

  window.pendingHamburgerClick = false;
  window.remoteHamburgerClick = function () {
    if (!window.pendingHamburgerClick) {
      return;
    }
    window.hamburgerClick();
    window.pendingHamburgerClick = false;
  };

  window.hamburgerClick = () => {
    if (!pendingHamburgerClick) {
      pendingHamburgerClick;
    }
    const innerHeight = header.scrollHeight;
    if (menuExpanded) {
      header?.classList.remove("expanded");
      header.style.setProperty(
        "--headerHeight",
        Math.min(innerHeight, window.innerHeight) + "px"
      );
      setTimeout(() => {
        header.style.setProperty("--headerHeight", mobileHeaderHeight + "px");
      }, 0);
    } else {
      moveHoverToAnchor();

      header?.classList.add("expanded");
      header.style.setProperty(
        "--headerHeight",
        Math.min(innerHeight, window.innerHeight) + "px"
      );
      setTimeout(() => {
        header.style.setProperty("--headerHeight", "auto");
      }, headerHeightTransitionDuration * 1000);
      header.position = "fixed";
    }
    menuExpanded = !menuExpanded;
    // console.log("menuExpanded: ", menuExpanded);
  };

  hamburger?.addEventListener("click", window.hamburgerClick);

  // const navLis = querySelectorAll("nav li");
  // for (let i = 0; i < navLis.length; i++) {
  //   navLis[i].addEventListener("click", function () {
  //     alert("click!");
  //     if (window.innerWidth <= mobileMaxWidth && menuExpanded) {
  //       // hamburger.click();
  //     }
  //   });
  // }

  let wasMobile = false;
  const evaluateTransitionable = () => {
    const isMobile = window.innerWidth <= mobileMaxWidth;
    // console.log(isMobile);
    if (isMobile && !wasMobile) {
      header.classList.add("headerTransitionable");
      header.scrollTop = 0;
      // hoverZone.style.transition = "none";
      hoverZone?.classList.remove("hoverZoneTransition");
      moveHoverToAnchor();
    } else if (!isMobile && wasMobile) {
      header.classList.remove("headerTransitionable");
      header.style.transform = "none";
      // hoverZone.style.transition = "none";
      hoverZone?.classList.remove("hoverZoneTransition");
      moveHoverToAnchor();
    }
    wasMobile = isMobile;
    if (menuExpanded) {
      // debugger;
      hoverZone?.classList.remove("hoverZoneTransition");
      moveHoverToAnchor();
    }
  };
  evaluateTransitionable();
  window.addEventListener("resize", evaluateTransitionable);
</script>

